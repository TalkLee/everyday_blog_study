###正则表达式

创建正则表达式:

1. var reg1 = /pattern/flag;
2. var reg2 = new RegExp("pattern",flag);  //flag此时为字符串
3. var reg3 = new RegExp(/pattern/,flag);  //flag此时为字符串

例：

        var reg = new RegExp('abc','gi');  
        var reg = /abc/gi;
        两者等价,即构造函数中无需添加pattern两边的/

构造函数生成正则的优点在于正则表达式动态变化的情况下可以传入变量

[向字符串中加入特殊字符,需要转义](http://www.w3school.com.cn/js/js_special_characters.asp)，即加入反斜杠 __\ __

元字符: ( [ \ ^ $ | ? * + ] ) . 

当在正则表达式中添加元字符时，需要进行转义
当在构造函数的模式参数中添加元字符时，需要进行双重转义
例：
    
        //?在正则中表示非字面含义，若要表示字面含义，需通过\进行转义
        var reg = /\?/;  
        var reg2 = new RegExp("\?"); 在正则表达式构造函数参数字符串中正则表达式的量词都是需要被转义的特殊字符，所以\?实际表达含义为 '?' 
        //若要reg2表示含义和reg相同，需要对\做转义
        var reg3 = new RegExp("\\?");// \\表示后一个\被转义了，浏览器会看作字符串\?,等价于reg3 = /\?/ 



- (x): 捕获括号，用于获取匹配到的字符串，然后用于后续处理
- (?:x):非捕获括号，匹配到的子串无法通过结果数组的下标进行访问
- 引用捕获到的分组，应使用\num方法，其中num表示对应捕获分组的编号

/^([a-z])\1$/  : 匹配连续的两个相同小写字母
在被替换的字符串中引用捕获分组，应使用$num记法






RegExp实例方法:

1. test()
    



#正则待复习

元字符:
- \b 单词的分界处 , 匹配位置
- . 除了 __换行符__ 的任意 __字符__
- \d 匹配数字
- \s 匹配任意空白符(空格制表符换行符中英文全角半角空格)
- \w 匹配字母数字下划线或者汉字  __错误__  ，无法匹配汉字
- ^ 匹配字符串的开始,匹配位置
- $ 匹配字符串的结束,匹配位置
- ( 和 )
- 
字符转义:正则表达式中的元字符需要进行转义才能表示字面含义

限定符(设置匹配字符串数量)

- * 匹配0到多个
- + 匹配1到多个
- ? 匹配0或1个
- {n} 匹配n个
- {n,}至少匹配n个
- {n,m} 匹配n到m个

字符类：设置字符集合来匹配指定范围内的字符

分支条件

    
